env:
  JDK_DISTRO: temurin
  JDK_VERSION: 21
jobs:
  build_linux:
    if: needs.git_check.outputs.run_build == 'true'
    name: Linux build
    needs: git_check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: 'Checkout branch: ${{ env.GITHUB_REF }}'
      uses: actions/checkout@v4
      with:
        ref: main
    - continue-on-error: true
      id: snapcraft
      name: Build Snap package
      uses: snapcore/action-build@v1
    - continue-on-error: true
      if: success()
      name: Upload *.snap artifact.
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.git_check.outputs.base_name }}_amd64.snap
        path: ${{ steps.snapcraft.outputs.snap }}
    - continue-on-error: true
      name: Set up JDK ${{ env.JDK_VERSION }} ${{ env.JDK_DISTRO }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRO }}
        java-version: ${{ env.JDK_VERSION }}
    - continue-on-error: true
      name: Build binary JAR
      run: '# Have no mercy.

        set -euo pipefail


        chmod +x gradlew

        ./gradlew shadowJar

        '
    - continue-on-error: true
      if: success()
      name: Upload binary JAR
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.git_check.outputs.base_name }}-all-jdk${{ env.JDK_VERSION
          }}.jar
        path: build/libs/${{ needs.git_check.outputs.lse_name }}-${{ needs.git_check.outputs.lse_version
          }}-all.jar
    - continue-on-error: true
      name: Build DEB
      run: '# Have no mercy.

        set -euo pipefail


        chmod +x gradlew

        ./gradlew createDeb -x checkstyleMain -x checkstyleTest

        '
    - continue-on-error: true
      if: success()
      name: Upload *.deb
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.git_check.outputs.base_name }}_amd64.deb
        path: build/dist/${{ needs.git_check.outputs.lse_name }}_${{ needs.git_check.outputs.lse_version
          }}_amd64.deb
    - continue-on-error: true
      name: Build RPM
      run: '# Have no mercy.

        set -euo pipefail


        chmod +x gradlew

        # Needs rpm package, but it should be installed already.

        ./gradlew createRpm -x checkstyleMain -x checkstyleTest

        '
    - continue-on-error: true
      if: success()
      name: Upload *.rpm
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.git_check.outputs.base_name }}.x86_64.rpm
        path: build/dist/${{ needs.git_check.outputs.lse_name }}-${{ needs.git_check.outputs.lse_version
          }}-1.x86_64.rpm
    - continue-on-error: true
      name: Build sources JAR
      run: '# Have no mercy.

        set -euo pipefail


        chmod +x gradlew

        # Need to clean to have just one JAR or createDistDir task would fail.

        ./gradlew clean

        ./gradlew sourcesJar

        '
    - continue-on-error: true
      if: success()
      name: Upload sources JAR
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.git_check.outputs.base_name }}-src.jar
        path: build/libs/${{ needs.git_check.outputs.lse_name }}-${{ needs.git_check.outputs.lse_version
          }}-src.jar
  build_macos:
    if: needs.git_check.outputs.run_build == 'true'
    name: macOS build
    needs: git_check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout sources
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}
    - continue-on-error: true
      name: Set up aarch64 JDK ${{ env.JDK_VERSION }} ${{ env.JDK_DISTRO }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRO }}
        java-version: ${{ env.JDK_VERSION }}
    - continue-on-error: true
      name: Build aarch64 DMG
      run: '# Have no mercy.

        set -euo pipefail


        chmod +x gradlew

        ./gradlew createDmg -x checkstyleMain -x checkstyleTest

        '
    - continue-on-error: true
      if: success()
      name: Upload aarch64 DMG
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.git_check.outputs.base_name }}-aarch64.dmg
        path: build/dist/${{ needs.git_check.outputs.lse_name }}-${{ needs.git_check.outputs.lse_version
          }}-aarch64.dmg
    - continue-on-error: true
      name: Set up x86_64 JDK ${{ env.JDK_VERSION }} ${{ env.JDK_DISTRO }}
      uses: actions/setup-java@v4
      with:
        architecture: x64
        distribution: ${{ env.JDK_DISTRO }}
        java-version: ${{ env.JDK_VERSION }}
    - continue-on-error: true
      name: Build x86_64 DMG
      run: '# Have no mercy.

        set -euo pipefail


        chmod +x gradlew

        ./gradlew createDmg -x checkstyleMain -x checkstyleTest

        '
    - continue-on-error: true
      if: success()
      name: Upload x86_64 DMG
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.git_check.outputs.base_name }}-x86_64.dmg
        path: build/dist/${{ needs.git_check.outputs.lse_name }}-${{ needs.git_check.outputs.lse_version
          }}-x86_64.dmg
  build_windows:
    if: needs.git_check.outputs.run_build == 'true'
    name: Windows build
    needs: git_check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout sources
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK ${{ env.JDK_VERSION }} ${{ env.JDK_DISTRO }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRO }}
        java-version: ${{ env.JDK_VERSION }}
    - continue-on-error: true
      name: Build MSI
      run: .\gradlew.bat createMsi -x checkstyleMain -x checkstyleTest
    - continue-on-error: true
      if: success()
      name: Upload MSI
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.git_check.outputs.base_name }}-amd64.msi
        path: build\dist\${{ needs.git_check.outputs.lse_name }}-${{ needs.git_check.outputs.lse_version_short
          }}-amd64.msi
  git_check:
    name: Any changes since last run?
    outputs:
      base_name: ${{ steps.filter.outputs.base_name }}
      lse_name: ${{ steps.filter.outputs.lse_name }}
      lse_version: ${{ steps.filter.outputs.lse_version }}
      lse_version_short: ${{ steps.filter.outputs.lse_version_short }}
      run_build: ${{ steps.filter.outputs.run_build }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout sources
      uses: actions/checkout@v4
    - continue-on-error: true
      id: filter
      name: ANY CHANGES SINCE LAST BUILD?
      run: "# Have no mercy.\nset -euo pipefail\n\n# Short name for branch in which\
        \ action was triggered.\ndeclare -r branch_name=\"${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}\"\
        \necho \"Triggered for branch: ${branch_name}\"\n\n# Get SHA of last commit\
        \ in that branch.\ndeclare -r last_commit_sha=\"$(git rev-parse HEAD)\"\n\n\
        # Let's see if we have any commits in last 24 hours.\nif [[ -n \"$(git rev-list\
        \ --after=\"24 hours\" ${last_commit_sha})\" ]]; then\n  echo \"run_build=true\"\
        \ >> $GITHUB_OUTPUT\nelse\n  echo \"*** No code changes since yesterday. Skipping.\"\
        \nfi\n\n# I need to export current version, even if is incorrect for main\
        \ branch as it\n# is part of produced artifacts. We will strip it prior uploading\
        \ anyway.\n\n# LSe version string can have additional \"unstable\" indicator\
        \ (i.e. \"-dev\") but\n# we are forced to drop the \"-\" as some packages\
        \ do not allow it. So in fact\n# Gradle artifact for \"1.2.3-dev\" uses \"\
        1.2.3dev\" in file names, so we need to\n# consider that whlie looking for\
        \ artifacts (i.e. for upload).\ndeclare -r version_prop=$(grep '^version\\\
        s*=.*' gradle.properties | awk '{print $3}')\n\n# Remove \"-\" (if present)\
        \ from version string.\ndeclare -r lse_version=$(echo \"${version_prop}\"\
        \ | awk '{gsub(\"-\",\"\", $0); print}')\necho \"lse_version=${lse_version}\"\
        \ >> $GITHUB_OUTPUT\n\n# Version string with suffix stripped. Required for\
        \ some packages/platforms.\ndeclare -r lse_version_short=$(echo \"${version_prop}\"\
        \ | awk '{ split($0, v, \"-\")} {print v[1]}')\necho \"lse_version_short=${lse_version_short}\"\
        \ >> $GITHUB_OUTPUT\n\ndeclare -r lse_name=\"$(fgrep name gradle.properties\
        \ | awk '{print $3}')\"\necho \"lse_name=${lse_name}\" >> $GITHUB_OUTPUT\n\
        \n# Base name for uploaded artifacts.\necho \"base_name=${lse_name}_${branch_name}_$(date\
        \ +%Y%m%d)\" >> $GITHUB_OUTPUT\n"
name: Nightly
on:
  repository_dispatch:
    types: trigger-ga___nightly.yml
